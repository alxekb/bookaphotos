---
- name: get the current user
  local_action: command whoami
  register: username_on_the_host

- name: Create Key
  ec2_key:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    name: "{{ username_on_the_host.stdout_lines[0] }}"
    key_material: "{{ item }}"
  with_file: "/home/{{ username_on_the_host.stdout_lines[0] }}/.ssh/drailean.pub"

- name: SSH security group
  ec2_group:
    name: ssh
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Security group that allow SSH from public IP
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0

- name: WEB security group
  ec2_group:
    name: web
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Security group that allow web traffic
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8080
        to_port: 8080
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8081
        to_port: 8081
        cidr_ip: 0.0.0.0/0

- name: DB security group
  ec2_group:
    name: db
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Security group that allow db traffic
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 3306
        to_port: 3306
        cidr_ip: 0.0.0.0/0

- name: Redis security group
  ec2_group:
    name: redis
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    description: Security group that allow redis traffic
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 6379
        to_port: 6379
        cidr_ip: 0.0.0.0/0
  register: redis_security_group

- name: Provision one application node with db role
  ec2:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    image: "{{ ami }}"
    instance_type: "{{ application_instance_type }}"
    key_name: "{{ username_on_the_host.stdout_lines[0] }}"
    group:
      - default
      - ssh
      - web
      - db
      - redis
    wait: true
    count_tag:
      Name: "application-{{ application_name_environment }}"
      Project: "{{ application_name }}"
      Stages: "{{ application_name_environment }}"
      Roles: web,db
    exact_count: "1"
    instance_tags:
      Name: "application-{{ application_name_environment }}"
      Project: "{{ application_name }}"
      Stages: "{{ application_name_environment }}"
      Roles: web,db
  register: new_db_application_nodes

- name: Provision all other application nodes
  ec2:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    image: "{{ ami }}"
    instance_type: "{{ application_instance_type }}"
    key_name: "{{ username_on_the_host.stdout_lines[0] }}"
    group:
      - default
      - ssh
      - web
      - db
      - redis
    wait: true
    count_tag:
      Name: "application-{{ application_name_environment }}"
      Project: "{{ application_name }}"
      Stages: "{{ application_name_environment }}"
      Roles: web
    exact_count: "{{ application_node_count - 1 }}"
    instance_tags:
      Name: "application-{{ application_name_environment }}"
      Project: "{{ application_name }}"
      Stages: "{{ application_name_environment }}"
      Roles: web
  register: new_application_nodes

- name: Setup PostgreSQL server
  rds:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    command: create
    instance_name: "rds-{{ application_name_environment }}"
    db_engine: postgres
    size: "{{ rds_instance_size }}"
    instance_type: "{{ rds_instance_type }}"
    username: root
    password: "{{ database_root_password }}"
    db_name: "{{ application_name_with_environment }}"
    tags:
      Project: "{{ application_name }}"
      Stages: "{{ application_environment }}"
      Roles: db

- name: Setup Redis server for Sidekiq
  elasticache:
    name: "redis-{{ application_name_environment }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    zone: "{{ zone }}"
    num_nodes: 1
    state: present
    engine: redis
    node_type: cache.m1.small
    security_group_ids:
      - "{{ redis_security_group.group_id }}"

- name: Add all instance public IPs to new_db_application_nodes group
  add_host: name={{ item.public_ip }} groups=new_db_application_nodes
  with_items: "{{ new_db_application_nodes.instances }}"

- name: Add all instance public IPs to new_application_nodes group
  add_host: name={{ item.public_ip }} groups=new_application_nodes
  with_items: "{{ new_application_nodes.instances }}"

- name: Wait for port 22 to be ready
  wait_for: port=22 delay=10 host={{ item.public_dns_name }}
  with_items: "{{ new_db_application_nodes.instances }}"

- name: Wait for port 22 to be ready
  wait_for: port=22 delay=10 host={{ item.public_dns_name }}
  with_items: "{{ new_application_nodes.instances }}"

- name: Get EC2 instances
  ec2_remote_facts:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    filters:
      instance-state-name: running
      "tag:Name": "application-{{ application_name_environment }}"
      "tag:Project": "{{ application_name }}"
      "tag:Stages": "{{ application_name_environment }}"
  register: all_application_nodes

- name: Add all instance public host names to all_application_nodes group
  add_host: name={{ item.public_dns_name }} groups=all_application_nodes
  with_items: "{{ all_application_nodes.instances }}"

- name: Wait for port 22 to be ready
  wait_for: port=22 delay=10 host={{ item.public_dns_name }}
  with_items: "{{ all_application_nodes.instances }}"

- name: Create AWS ELB
  ec2_elb_lb:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "elb-{{ application_name_environment }}"
    state: present
    region: "{{ region }}"
    zones: "{{ zone }}"
    security_group_names:
      - 'default'
      - 'web'
    listeners:
      - protocol: http
        load_balancer_port: 80
        instance_port: 8080
        instance_protocol: http
      - protocol: ssl
        load_balancer_port: 443
        proxy_protocol: True
        instance_port: 8081
        instance_protocol: tcp
        ssl_certificate_id: "{{ ssl_arn }}"
  register: elb_nodes
  until: "elb_nodes.module_stderr is not defined"
  retries: 2
  delay: 1

- name: Add EC2 instances to LB
  ec2_elb:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    instance_id: "{{ item.id }}"
    ec2_elbs: "elb-{{ application_name_environment }}"
    state: present
  with_items: "{{ all_application_nodes.instances }}"
  ignore_errors: yes

- name: Setup DNS Zone
  route53_zone:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    zone: "{{ domain_zone }}"
    state: present

- name: Setup DNS Records
  route53:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    command: create
    zone: "{{ domain_zone }}"
    record: "{{ host_name }}"
    alias: true
    alias_hosted_zone_id: "{{ elb_nodes.elb.hosted_zone_id }}"
    value: "{{ elb_nodes.elb.dns_name }}"
    type: A
    ttl: 300
    wait: yes
    overwrite: true
